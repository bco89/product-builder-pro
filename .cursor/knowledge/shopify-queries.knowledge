# Shopify Queries Knowledge Base

## GraphQL Queries
GraphQL queries retrieve data from a server, similar to a GET request for a REST API. However, unlike REST, GraphQL queries are sent to a single endpoint and use the POST HTTP method.

A GraphQL API models data as nodes that are connected by edges. A node is an object that has a global ID, such as the Order or Product objects. You can fetch data about an individual node, or you can follow the edges to fetch data about a collection of related nodes.

### Core Concepts
- Single endpoint for all queries using POST
- Node-based data model with global IDs
- Explicit field selection
- Nested data retrieval
- Connection-based pagination
- Built-in filtering and search

### Query Structure

#### Basic Components
1. Operation name (`query`)
2. Field selection
3. Arguments (optional)
4. Nested field selection

#### Example Structure
```graphql
query QueryName {
  field(argument: value) {
    subfield1
    subfield2
    nestedObject {
      nestedField1
      nestedField2
    }
  }
}
```

### Common Patterns

#### Fields
- Basic units of data associated with objects
- Can have arguments to filter or customize results
- Must be explicitly requested
- Can be nested for complex data structures

Example:
```graphql
query {
  product(id: "gid://shopify/Product/123") {
    id
    title
    description
    vendor
  }
}
```

#### Connections
- Represent relationships between types
- Required for paginated lists
- Must specify `first` or `last` for pagination
- Support cursor-based navigation

Example:
```graphql
query {
  products(first: 10) {
    edges {
      cursor
      node {
        id
        title
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
```

#### Nodes Shorthand
```graphql
query {
  products(first: 10) {
    nodes {
      id
      title
    }
  }
}
```

### Common Queries

#### Product Queries
```graphql
# Get Single Product
query GetProduct($id: ID!) {
  product(id: $id) {
    id
    title
    description
    variants(first: 10) {
      nodes {
        id
        price
      }
    }
  }
}

# Get Product List
query GetProducts {
  products(first: 10) {
    nodes {
      id
      title
      status
    }
  }
}

# Search Products
query SearchProducts($query: String!) {
  products(first: 10, query: $query) {
    nodes {
      id
      title
    }
  }
}
```

### Filtering and Search
- Use `query` argument for text-based search
- Support complex search syntax
- Can filter by specific fields
- Combine multiple conditions

Example:
```graphql
query {
  products(
    first: 10,
    query: "status:active vendor:Nike price:>100"
  ) {
    nodes {
      id
      title
      vendor
      priceRange {
        minVariantPrice {
          amount
        }
      }
    }
  }
}
```

### Pagination
- Cursor-based pagination using edges
- Forward pagination with `first` and `after`
- Backward pagination with `last` and `before`
- PageInfo object for navigation

Example:
```graphql
query {
  products(first: 10, after: "cursor") {
    edges {
      cursor
      node {
        id
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
```

### Best Practices
1. Request only needed fields
2. Use pagination for large datasets
3. Implement proper error handling
4. Cache responses when appropriate
5. Use aliases for duplicate fields
6. Leverage fragments for reusable field sets
7. Include operation names for debugging
8. Use variables for dynamic values

### Performance Considerations
- Limit connection sizes
- Avoid deeply nested queries
- Use pagination appropriately
- Consider query complexity
- Cache frequently used queries
- Monitor query performance

### Links
- [GraphQL Queries Basics](https://shopify.dev/docs/apps/build/graphql/basics/queries)
- [Search Syntax](https://shopify.dev/api/usage/search-syntax)
- [Pagination Guide](https://shopify.dev/api/usage/pagination-graphql)

### Note
The REST Admin API is deprecated as of October 1, 2024. All apps and integrations should be built with the GraphQL Admin API.
