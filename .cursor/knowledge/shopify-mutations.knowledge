# Shopify Mutations Knowledge Base

## GraphQL Mutations
GraphQL mutations create and modify objects, similar to a PUT, POST, or DELETE request in REST. However, unlike REST, GraphQL mutations are sent to a single endpoint and use the POST HTTP method.

### Core Concepts
- Mutations modify data on the server (create, update, delete)
- Single endpoint for all operations using POST
- Structured input using Input Objects
- Return fields must be explicitly requested
- Built-in error handling through userErrors
- Support for bulk operations

### Mutation Structure

#### Basic Components
1. Operation name (`mutation`)
2. Mutation field name (e.g., `productCreate`)
3. Input data (arguments)
4. Return field selection

#### Example Structure
```graphql
mutation MutationName($input: InputType!) {
  mutationField(input: $input) {
    returnObject {
      field1
      field2
    }
    userErrors {
      field
      message
    }
  }
}
```

### Common Patterns

#### Input Objects
- Used for complex input data
- Typed and validated by the schema
- Can be nested for complex operations
- Often suffixed with "Input" (e.g., `ProductInput`)

Example:
```graphql
input ProductInput {
  title: String
  description: String
  variants: [ProductVariantInput!]
  metafields: [MetafieldInput!]
}
```

#### Return Fields
- Must explicitly request desired fields
- Always include userErrors for error handling
- Can request multiple levels of nested data
- Support pagination for connections

Example:
```graphql
mutation {
  productCreate(input: $input) {
    product {
      id
      title
      variants {
        edges {
          node {
            id
            price
          }
        }
      }
    }
    userErrors {
      field
      message
    }
  }
}
```

### Common Mutations

#### Product Operations
```graphql
# Create Product
mutation productCreate($input: ProductInput!) {
  productCreate(input: $input) {
    product {
      id
    }
    userErrors {
      field
      message
    }
  }
}

# Update Product
mutation productUpdate($input: ProductInput!) {
  productUpdate(input: $input) {
    product {
      id
    }
    userErrors {
      field
      message
    }
  }
}

# Bulk Operations
mutation productVariantsBulkCreate(
  $productId: ID!
  $variants: [ProductVariantsBulkInput!]!
) {
  productVariantsBulkCreate(
    productId: $productId
    variants: $variants
  ) {
    productVariants {
      id
    }
    userErrors {
      field
      message
    }
  }
}
```

### Bulk Operations
- Support for large-scale data modifications
- Asynchronous processing
- Progress tracking
- Result handling through separate queries

Example:
```graphql
mutation bulkOperationRunMutation(
  $mutation: String!
  $stagedUploadPath: String!
) {
  bulkOperationRunMutation(
    mutation: $mutation
    stagedUploadPath: $stagedUploadPath
  ) {
    bulkOperation {
      id
      status
    }
    userErrors {
      field
      message
    }
  }
}
```

### Best Practices
1. Always include userErrors in return fields
2. Use variables for input data
3. Request only needed fields in response
4. Handle errors appropriately
5. Use bulk operations for large datasets
6. Follow naming conventions
7. Implement proper error handling
8. Use input validation

### Error Handling
- Check userErrors field for validation errors
- Handle network and system errors
- Implement retry logic for transient failures
- Log errors for debugging
- Provide meaningful error messages to users

### Deprecated Features
- `productPublish` - Use `publishablePublish` instead
- `productCreateMedia` - Use `productUpdate` or `productSet`
- `productUpdateMedia` - Use `fileUpdate`
- Product publications in input types - Use new publishing workflows

### Links
- [GraphQL Mutations Basics](https://shopify.dev/docs/apps/build/graphql/basics/mutations)
- [Bulk Operations Guide](https://shopify.dev/api/usage/bulk-operations/imports)
- [Error Handling](https://shopify.dev/api/usage/errors)
